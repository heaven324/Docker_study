# cmd

docker container run ubuntu:latest /bin/echo 'Hello World'      # 컨테이너 실행 및 내용

docker version                                                  # docker 버전 확인

docker system info                                              # 시스템 정보 확인

docker system df                                                # docker 디스크 이용 상황

docker pull nginx                                               # docker 이미지 다운로드 

docker image ls                                                 # docker 이미지 확인

docker container rum --name webserver -d -p 80:80 nginx         # 컨테이너 실행

docker container ps                                             # 컨테이너 상태 확인

docker container stats webserver                                # 컨테이너 가동 확인 / 리소스 모니터?

docker stop webserver                                           # 컨테이너 정지

docker start webserver                                          # 컨테이너 시작
                        
docker image ls                                                 # docker 이미지 목록 표시

docker image inspect ubuntu:latest                              # 이미지 상세정보 표시

docker image tag ubuntu seongho/ubuntu:1.0                      # 이미지 태그 설정(주로 버전을 쓴다)/실체는 같다

docker search ubuntu                                            # docker hub에 있는 이미지 검색

docker image rm nginx                                           # docker 이미지 삭제




# 4장 Docker 명령

docker image pull [옵션] 이미지명:[태그명]                      # 이미지 다운로드
docker image pull -a centos

docker image ls [옵션] [리포지토리 명]                          # 이미지 목록 표시
docker image ls
docker image ls --digests

docker image inspect 이미지명:[태그명]                          # 이미지 상세정보 표시

docker image tag [기존 태그] [바꿀 태그]                        # 이미지 태그 변경

docker search [옵션] <검색키워드>                               # 이미지 검색
docker search ubuntu

docker image rm [옵션] 이미지명 [이미지명]                      # 이미지 삭제
docker image rm 82f 9f1 368 f1a 5bf

docker image prune [옵션]                                       # 사용하지 않는 이미지 삭제
docker image prune -a                                           # 사용하지 않는 이미지 모두 삭제


docker container run [옵션] 이미지명:[태그명] [인수]            # 컨테이너 생성 및 시작
docker container run -it --name "test1" centos /bin/cal
docker container run -it --name "test2" centos /bin/bash
docker container run -d centos /bin/ping localhost              # 컨테이너 백그라운드 실행
docker container logs -t 098dd55                                # 컨테이너 로그 확인
exit                                                            # 컨테이너 실행 종료

docker container run [네트워크 옵션] 이미지명:[태그명] [인수]   # 컨테이너의 네트워크 설정
docker container run -d -p 7080:80 nginx                        # 호스트의 8080과 컨테이너의 80과의 매핑
docker container run -d --dns 192.168.0.1 nginx                 # 컨테이너의 DNS 서버 지정

docker container run [자원 옵션] 이미지명:[태그명] [인수]       # 자원을 지정하여 컨테이너 생성
docker container run --cpu-shares=512 --memory=1g centos        # cpu와 메모리 사용량의 지정
docker conatiner run -v /Users/asa/webap:/usr/share nginx       # 디렉토리 공유

docker container run [환경설정 옵션] 이미지명:[태그명] [인수]   # 컨테이너 시작 환경 지정
docker container run -it -e foo=bar centos /bin/bash            # 환경변수 설정
docker container run -it --env-file=env_list centos /bin/bash   # 환경변수 일괄 설정
docker container run -it -w=/tensorflow centos /bin/bash        # 작업 디렉토리 설정

docker container ls [옵션]                                      # 가동 컨테이너 목록 표시

docker container status [컨테이너 식별자]                       # 컨테이너 가동 확인
docker container status webserver
docker container top webserver                                  # 프로세스 확인
ctrl + c                                                        # 명령 종료

docker container start [옵션] <컨테이너 식별자> [컨테이너 식별자] # 정지 컨테이너 시작

docker container stop [옵션] <컨테이너 식별자> [컨테이너 식별자] # 컨테이너 정지

docker container restart [옵션] <컨테이너 식별자> [컨테이너 식별자] # 컨테이너 재시작

docker container rm [옵션] <컨테이너 식별자> [컨테이너 식별자]  # 컨테이너 삭제
docker container prune                                          # 정지중인 모든 컨테이너 삭제

docker container pause <컨테이너 식별자>                        # 작동중인 컨테이너의 프로세스 중단
docker container unpause webserver                              # 재개


docker network ls [옵션]                                        # 네트워크 목록 표시(기본 컨테이너 시작:bridge)

docker network create [옵션] 네트워크                           # 네트워크 작성
docker network create --driver=bridge web-network               # 브리지 네트워크 작성
docker network ls --filter driver=bridge                        # 작성한 네트워크 확인

docker network connect [옵션] 네트워크 컨테이너                 # 네트워크 연결
docker network connect web-network sample                       # 지정 네트워크 연결
docker container run -itd --name=webap --net=web-network nginx  # 컨테이너 시작시 네트워크 지정
docker network disconnect web-network sample                    # 네트워크 연결 해제

docker network inspect web-network                              # 네트워크 상세 정보 확인

docker network rm [옵션] 네트워크                               # 네트워크 삭제
docker network rm web-network


docker container attach sample                                  # 가동 컨테이너 연결
ctrl + c        ctrl + p, q                                     # 컨테이너 종료, 컨테이너 분리

docker container exec [옵션] <컨테이너 식별자> <실행 명령> [인수] # 가동 컨테이너에서 프로세스 실행
docker container exec sample /bin/bash
docker container exec -it sample /bin/echo "Hello"

docker container top sample                                     # 가동 컨테이너의 프로세스 확인

docker container port sample                                    # 가동 컨테이너의 포트 전송 확인

docker container rename sample test                             # 컨테이너의 이름 변경

docker container cp <컨테이너 식별자>:<컨테이너 안의 파일 경로> <호스트의 디렉토리 경로>
docker container cp <호스트의 파일> <컨테이너 식별자>:<컨테이너 안의 파일 경로>
                                                                # 컨테이너 안의 파일 복사
docker container cp test:/etc/bash.bashrc ./test.bashrc
docker container cp ./test.bashrc test:/etc/test.bashrc

docker container diff <컨테이너 식별자>                         # 컨테이너 조작의 차분 확인
docker container diff test


docker container commit [옵션] <컨테이너 식별자> [이미지명[:태그명]] # 컨테이너로부터 이미지 작성
docker container commit -a "heaven" test heaven/testtest:1.0
docker image inspect heaven/testtest:1.0

docker container export <컨테이너 식별자>                       # 컨테이너를 tar파일로 출력
docker container export test > test.tar
tar tf test.tar | more                                          # tar파일로 출력된 상세 내용 확인

docker image import <파일 또는 URL> | - [이미지명[:태그명]]     # tar 파일로 이미지 작성(tar, tar.gz, tgz, bzip, tar.xz, txz)
cat test.tar | docker image import - heaven2/test:2.0           # 실제론 구문이 좀 다름

docker image save [이미지명] > <저장 파일명>                    # 이미지 저장
docker image save heaven/testtest:1.0 > test.tar                # 실제론 구문이 좀 다름

docker image load [옵션]                                        # 이미지 읽어 들이기
docker image load -i test.tar

docker system prune [옵션]                                      # 불필요한 이미지/컨테이너 일괄 삭제




# Dockfile을 사용한 코드에 의한 서버 구축

FROM [이미지명]:{[태그명]or[@다이제스트]}                       # Dockerfile 베이스 이미지 서식
FROM heaven/testtest:1.0


docker build -t [생성할 이미지명]:[태그명] [Dockerfile의 위치]  # docker build 의 명령어 서식
docker build -t sample:1.0 ../sample
docker build -t sample -f Dockerfile.txt ./                     # 파일명 지정 빌드

이미지 빌드 예시(Dockerfile)
FROM ubuntu:latest
RUN apt-get update && apt-get install -y -q nginx
COPY index.html /usr/share/nginx/html
CMD ["nginx", "-g", "daemon off;"]

docker history webap                                            # 빌드 명령 확인

RUN [실행하고싶은 명령]                                         # 명령실행(Dockerfile)
RUN apt-get install -y nginx                                    # Shell 형식의 명령
RUN ["/bin/bash", "-c", "apt-get install -y nginx"]             # Exec 형식의 명령

CMD [실행하고 싶은 명령]                                        # 데몬 실행 명령
CMD ["nginx", "-g", "daemon off;"]                              # Exec로 데몬실행
CMD nginx -g 'daemon off;'                                      # Shell로 데몬실행

ENTRYPOINT [실행하고 싶은 명령]                                 # docker run 시 데몬 실행 명령
ENTRYPOINT ["nginx", "-g", "daemon off;"]                       # Exec로 데몬실행
ENTRYPOINT nginx -g 'daemon off;'                               # Shell로 데몬실행

ONBUILD [실행하고 싶은 명령]                                    # 빌드 완료 후에 실행되는 명령






# YOLOv4 docker run code

pytorch/pytorch             1.9.0-cuda11.1-cudnn8-devel
meadml/cuda11.0-cudnn8-devel-ubuntu18.04-python3.8   latest

docker run -it --name ftsl --gpus '"device=6,7"' -v /raid/session/lipo/netcoretech:/workspace myelintek/yolov4:1.1 /bin/bash
: 컨테이너 생성하기

ctrl + p,q                                                      # 실행상태로 나오기

docker attach ftsl                                              # 실행중인 컨테이너 안으로 다시 들어가기


docker ps -a                                                    # 실행중인 컨테이너 리스트 보기


docker stop ftsl                                                # 내 실행중인 도커 멈추기


docker rm ftsl                                                  # 멈춰져 있는 내 컨테이너 지우기



python -m torch.distributed.launch --nproc_per_node 2 train.py --device 0,1 --batch 180
: gpu 분산 환경에서 yolo train

